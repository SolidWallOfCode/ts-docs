@startuml

!define ACTIVE #BBDDFF
!define DONE #DDFFDD
!define FALLOW #FFDDDD

package TsLuaConfig {
  Component TsLuaConfigSchemaParser [
    **Schema Parser and Generator**
    ----
    Parser for Lua configuration schemas.
    C++ code generator.
  ]
  Component TsLuaConfigMetaSchema ACTIVE [
    **MetaScheme for Lua Config Schemas**
    ----
    Lua schema that describes
    Lua configuration schema.
  ]
  Component TsLuaConfigInternals ACTIVE [
    **Internals**
    Design of generated C++
    configuration code.
  ]
  Component Errata ACTIVE [
    **Errata**
    ----
    Update the ""ts::Errata"" library
    to provide error reporting.
  ]
  TsLuaConfigSchemaParser ..> TsLuaConfigMetaSchema : Uses
  TsLuaConfigSchemaParser ..> TsLuaConfigInternals : Requires
  TsLuaConfigMetaSchema ..> TsLuaConfigSchemaParser : Generates
  TsLuaConfigInternals ..> Errata : Requires
}

package L7R {
  Component HostDB_L7 [
    Enable IP address resolution
    from an HTTP request.
  ]
  Component HostDB_Plugins [
    Provide plugin based control
    of IP address resolution.
  ]
  Component l7_resolver [
    Request Resolver
  ]
  Component L7R [
    Resolve upstream target
    from HTTP request.
  ]

  L7R ..> l7_resolver : Requires
}

package L4R {
  Component L4R [
    **Layer 4 Routing**
    Control connections based on
    L4 information, primarily
    TLS and IP.
  ]

  Component TLS_Control ACTIVE [
    **TLS Control**
    ----
    SNI Based Configuration.
    TLS control during handshake.
    Post TLS-handshake handling.
  ]

  L4R ..> TLS_Control : Requires
  TLS_Control ..> TsLuaConfigInternals : Requires
}

package "Cache Tools" {
  Component POC ACTIVE [
    **Partial Object Caching**
    ----
    Cache partial objects.
    Handling for
    * Stale While Revalidate
    * Stale While Error
  ]
  Component CacheTool ACTIVE [
    **Cache Tool**
    ----
    Examination of spans, stripes
    and directories.
    Manipulation of spans and stripes.
    Direct cache span initialization.
  ]
  Component CacheUpgrade [
    **Cache Internals Upgrade**
    ----
    More robust span / stripe handling.
    Remove dependency on AOS setting.
    Store critical span/stripe data on disk.
  ]
  Component CAT [
    **Cache API Toolkit**
    ----
    Plugin API for cache
    operation control.
  ]
  CAT ..> POC : Requires
  CAT --> CacheTool: After
  CacheUpgrade ..> CacheTool : Requires
}

package "Plugin Coordination" {
  Component ThreadInitialization DONE [
    **Thread Initialization**
    ----
    Restructure thread initialization
    to be modular and reliable.
  ]
  Component PluginHookFix [
    **Plugin Hook Restructure**
    ----
    Modularize hook dispatch.
  ]
  Component PluginTracking [
    **Plugin Tracking**
    ----
    Track source
    of continuations.
  ]
  Component PluginIntrospection [
    **Plugin Introspection**
    ----
    Enable plugins to discover
    and access other plugins.
  ]
  Component PluginControl [
    **Plugin Control**
    ----
    Enable plugins to control
    dispatch of other plugins
    callbacks. This includes
    inspecting and manipulating
    callbacks on hooks.
  ]
  Component PluginPriority [
    **Plugin Priority**
    ----
    Provide control of plugin
    callback ordering.
  ]
  note right of PluginPriority : Ready for production\ntesting in Y! ATS 5.3
  Component PluginReload [
    **Plugin Reload**
    ----
    Dynamically reload plugins.
  ]
  PluginTracking ..> PluginHookFix : Requires
  PluginTracking ..> ThreadInitialization : Requires
  PluginReload ..> PluginControl : Requires
  PluginReload --> PluginPriority : After
  PluginPriority ..> PluginIntrospection : Requires
  PluginControl ..> PluginIntrospection : Requires
  PluginIntrospection ..> PluginTracking : Requires
}

Package Logging {
  Component BufferWriter DONE [
   **BufferWriter**
   ----
   ""std::ostream"" like formatting to
   fixed buffers and MIOBuffers.
  ]
  Component BodyFactory ACTIVE [
    **MIOBuffer in BodyFactory**
    ----
    Use ""MIOBuffer"" in
    Body Factory.
  ]
  Component LogFormatAPI [
    **Log Formatting API**
    ----
    Enable plugins to generate text
    from logging formats using
    transaction data.
  ]
  Component PluginLogTags [
    **Plugin Log Tags**
    ----
    Enable logging tags that get
    text from a plugin.
  ]
  BodyFactory ..> BufferWriter : Requires
  LogFormatAPI ..> BodyFactory : Requires
  PluginLogTags ..> BodyFactory : Requires
}

package Testing {
  Component AUTest DONE [
    **AUTest**
    ----
    Python based
    testing framework.
  ]
  Component UnitTesting DONE [
    **C/C++ Unit Testing**
    ----
    Selected Catch.
  ]
  Component MicroServer DONE [
    **<U+03bc>Server**
    ----
    Simple HTTP server that responds
    to requests using a file of
    requests <U+21D4> responses.
  ]
  Component MicroDNS ACTIVE [
    **<U+03bc>Nameserver**
    ----
    Simple nameserver that responds
    to DNS queries using round robin
    from a list of IP addresses.
  ]

  Component ReplayTesting ACTIVE [
    **Replay Testing**
    ----
    Replay captured live traffic.
  ]

  Component TrafficCapture ACTIVE [
    **Traffic Capture**
    ----
    Capture live traffic in
    session / transaction based
    format.
  ]

  Component ProdValidator [
    **Production Server Validator**
    ----
    Use replay testing to validate
    configuration on a production
    host is in conformance with
    corporate policies.
  ]

  Component ConfigTesting [
    **Configuration Testing**
    ----
    Validate correct functioning of
    a production configuration.
  ]

  ReplayTesting ..> AUTest : Requires
  ReplayTesting ..> MicroServer : Requires
  ReplayTesting ..> MicroDNS : Requires
  ReplayTesting ..> TrafficCapture : Requires
  ConfigTesting ..> ReplayTesting : Requires
  ProdValidator ..> ReplayTesting : Requires
}

package "Http2" {
  Component OutboundRestructure [
    **Restructure Outbound**
    ----
    Restructure outbound connection
    handling for modularity.
    Similar to TS-3612.
  ]
  Component Http2Outbound [
    **HTTP/2 Outbound**
    ----
    Enable TS to make outbound
    HTTP/2 connections.
  ]
  Http2Outbound ..> OutboundRestructure : Requires
}

package Core {
  Component MgmtRPC [
    **Management RPC**
    ----
    Refactor the management RPC.
    * Make it a clean library.
    * Remove artificial delays.
    * Full bidirectional support.
  ]
  Component Chrono FALLOW [
    **Use std::chrono**
    ----
    Change time mechanisms to use
    ""std::chrono"".
  ]
}

package Plugins {
  Component ExportTSLib [
    **Export TS Lib**
    --
  ]
  Component PluginMgmt [
    **Command Line Plugin Management**
    ----
    Extend the plugin message mechanism
    to provide management of plugins
    from the command line.
  ]
  Component CPPAPI [
    **CPP API**
    ----
    This needs refreshing and
    extension.
  ]

  PluginMgmt ..> MgmtRPC : Requires
}

' ====== Other People ======
package OtherPeople {
  Component QUIC ACTIVE [
    **QUIC**
    ----
    Add support for QUIC.
  ]
  Component TS_RUN_ROOT DONE [
    **TS_RUN_ROOT**
    ----
    Enable TS to read a path
    configuration file which
    specifies the locations
    of the configuration files.
  ]
  Component TSVConnArgs [
    **Arg slots for TSVConn**
    ----
    Add argument slots to ""TSVConn""
    to enable passing data from
    early intervention to
    transactions processing.
  ]
  Component ConcurrentContainers [
    **Concurrent Containers**
    ----
    Select concurrent containers for
    use in TS and convert appropriate
    locked structures.
  ]
  QUIC -[hidden]- TS_RUN_ROOT
  TS_RUN_ROOT -[hidden]- TSVConnArgs
}

TS_RUN_ROOT ..> Testing : Relates
L4R ..> TSVConnArgs : Requires

' Fake links to control layout
TsLuaConfig -[hidden]-- Logging
Logging -[hidden]-- "Cache Tools"
"Cache Tools" -[hidden]-- "Plugin Coordination"
"Plugin Coordination" -[hidden]-- Testing

Plugins -[hidden]-- L7R
L7R -[hidden]-- L4R
L4R -[hidden]-- "Http2"

@enduml

/'

  subgraph {
    RPC_refactor [shape=folder];
    RPC_library [shape=rect style=rounded];
    RPC_manager_no_delay [shape=rect style=rounded];
    RPC_bidirectional [shape=rect style=rounded];
    RPC_plugin [shape=rect style=rounded];

    RPC_refactor -> {RPC_library RPC_manager_no_delay RPC_bidirectional RPC_plugin};
    RPC_library -> RPC_manager_no_delay;
    RPC_library -> RPC_bidirectional;
    RPC_bidirectional -> RPC_plugin;
  }

}

digraph {
  live_restart [shape=folder]
}
'/
